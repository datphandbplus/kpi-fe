(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms')) :
  typeof define === 'function' && define.amd ? define('ngx-ckeditor', ['exports', '@angular/core', '@angular/forms'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngx-ckeditor'] = {}, global.ng.core, global.ng.forms));
}(this, (function (exports, core, forms) { 'use strict';

  var defaults = {
      contentsCss: [''],
      customConfig: ''
  };
  var CKEditorComponent = /** @class */ (function () {
      function CKEditorComponent(ngZone, hostEl) {
          this.ngZone = ngZone;
          this.hostEl = hostEl;
          this.innerValue = '';
          this.disabled = false;
          this.editorInitialized = false;
          /**
           * Is readonly mode, default:false
           */
          this.readonly = false;
          /**
           * The ck-editor config object.
           */
          this.config = {};
          /**
           * The special skin, default: moono-lisa
           */
          this.skin = 'moono-lisa';
          /**
           * The special language, default: en
           */
          this.language = 'en';
          /**
           * Use fullpage mode, default:false
           */
          this.fullPage = false;
          /**
           * Use inline mode, default: false
           */
          this.inline = false;
          this.change = new core.EventEmitter();
          this.ready = new core.EventEmitter();
          this.blur = new core.EventEmitter();
          this.focus = new core.EventEmitter();
          this.onChange = function (value) { };
          this.onTouched = function () { };
          this.identifier = CKEditorComponent.getRandomIdentifier(this.id);
      }
      CKEditorComponent.getRandomIdentifier = function (id) {
          if (id === void 0) { id = ''; }
          return 'editor-' + (id !== '' ? id : String(CKEditorComponent.idx++));
      };
      Object.defineProperty(CKEditorComponent.prototype, "instance", {
          get: function () {
              return this.ckIns;
          },
          enumerable: false,
          configurable: true
      });
      CKEditorComponent.prototype.ngOnInit = function () { };
      CKEditorComponent.prototype.ngOnChanges = function (changes) {
          if (this.editorInitialized) {
              this.destroyEditor();
              this.initEditor(this.identifier);
          }
      };
      CKEditorComponent.prototype.ngAfterViewChecked = function () {
          if (!this.editorInitialized && this.documentContains(this.textareaRef.nativeElement)) {
              this.editorInitialized = true;
              this.initEditor(this.identifier);
          }
          else if (this.editorInitialized && !this.documentContains(this.textareaRef.nativeElement)) {
              this.editorInitialized = false;
              this.destroyEditor();
          }
      };
      CKEditorComponent.prototype.ngOnDestroy = function () {
          this.destroyEditor();
      };
      CKEditorComponent.prototype.initEditor = function (identifier) {
          var _this = this;
          if (typeof CKEDITOR === 'undefined') {
              return console.warn('CKEditor 4.x is missing (http://ckeditor.com/)');
          }
          var textareaEl = this.textareaRef.nativeElement;
          this.identifier = identifier;
          textareaEl.setAttribute('name', this.identifier);
          if (this.ckIns || !this.documentContains(this.textareaRef.nativeElement)) {
              return;
          }
          var opt = Object.assign({}, defaults, this.config, {
              readOnly: this.readonly,
              skin: this.skin,
              language: this.language,
              fullPage: this.fullPage,
              inline: this.inline
          });
          this.ckIns = this.inline ? CKEDITOR.inline(textareaEl, opt) : CKEDITOR.replace(textareaEl, opt);
          this.ckIns.setData(this.innerValue);
          this.ckIns.on('change', function () {
              var val = _this.ckIns.getData();
              _this.updateValue(val);
          });
          this.ckIns.on('instanceReady', function (evt) {
              _this.ngZone.run(function () {
                  _this.ready.emit(evt);
              });
          });
          this.ckIns.on('blur', function (evt) {
              _this.ngZone.run(function () {
                  _this.blur.emit(evt);
                  _this.onTouched();
              });
          });
          this.ckIns.on('focus', function (evt) {
              _this.ngZone.run(function () {
                  _this.focus.emit(evt);
              });
          });
      };
      CKEditorComponent.prototype.destroyEditor = function () {
          if (this.ckIns) {
              // If use destroy, will fire 'Error code: editor-destroy-iframe'
              // this.ckIns.destroy();
              if (CKEDITOR.instances.hasOwnProperty(this.ckIns.name)) {
                  CKEDITOR.remove(CKEDITOR.instances[this.ckIns.name]);
              }
              this.ckIns = null;
              var editorEl = this.hostEl.nativeElement.querySelector('#cke_' + this.identifier);
              if (editorEl != null && editorEl.parentElement) {
                  editorEl.parentElement.removeChild(editorEl);
              }
          }
      };
      CKEditorComponent.prototype.updateValue = function (value) {
          var _this = this;
          this.ngZone.run(function () {
              _this.innerValue = value;
              _this.onChange(value);
              _this.onTouched();
              _this.change.emit(value);
          });
      };
      CKEditorComponent.prototype.documentContains = function (node) {
          return document.contains ? document.contains(node) : document.body.contains(node);
      };
      CKEditorComponent.prototype.writeValue = function (value) {
          this.innerValue = value || '';
          if (this.ckIns) {
              // Fix bug that can't emit change event when set non-html tag value twice in fullpage mode.
              this.ckIns.setData(this.innerValue);
              var val = this.ckIns.getData();
              this.ckIns.setData(val);
          }
      };
      CKEditorComponent.prototype.registerOnChange = function (fn) {
          this.onChange = fn;
      };
      CKEditorComponent.prototype.registerOnTouched = function (fn) {
          this.onTouched = fn;
      };
      CKEditorComponent.prototype.setDisabledState = function (isDisabled) {
          this.disabled = isDisabled;
      };
      return CKEditorComponent;
  }());
  CKEditorComponent.idx = 1;
  CKEditorComponent.decorators = [
      { type: core.Component, args: [{
                  selector: 'ck-editor',
                  template: "\n    <textarea #textarea aria-label=\"editor content\"></textarea>\n  ",
                  providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return CKEditorComponent; }), multi: true }],
                  exportAs: 'ckEditor'
              },] }
  ];
  CKEditorComponent.ctorParameters = function () { return [
      { type: core.NgZone },
      { type: core.ElementRef }
  ]; };
  CKEditorComponent.propDecorators = {
      readonly: [{ type: core.Input }],
      config: [{ type: core.Input }],
      skin: [{ type: core.Input }],
      language: [{ type: core.Input }],
      fullPage: [{ type: core.Input }],
      inline: [{ type: core.Input }],
      id: [{ type: core.Input }],
      change: [{ type: core.Output }],
      ready: [{ type: core.Output }],
      blur: [{ type: core.Output }],
      focus: [{ type: core.Output }],
      textareaRef: [{ type: core.ViewChild, args: ['textarea', { static: false },] }]
  };

  var CKEditorModule = /** @class */ (function () {
      function CKEditorModule() {
      }
      return CKEditorModule;
  }());
  CKEditorModule.decorators = [
      { type: core.NgModule, args: [{
                  imports: [],
                  exports: [forms.FormsModule, CKEditorComponent],
                  declarations: [CKEditorComponent],
                  providers: []
              },] }
  ];

  /*
   * Public API Surface of ngx-ckeditor
   */

  /**
   * Generated bundle index. Do not edit.
   */

  exports.CKEditorComponent = CKEditorComponent;
  exports.CKEditorModule = CKEditorModule;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-ckeditor.umd.js.map
